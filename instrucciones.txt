Ir a la carpeta del proyecto y ejecutar en una terminal:
    virtualenv env (pongo env por poner un nombre, se puede poner margarita)
Luego ejecutar en la terminal source env/bin/activate
Ahí ejecutar ./install.sh (si da error puede que haya que darle permisos en las propiedades de ejecución.
Luego ejecutar ./boot.sh

Cambios en código:
    En main/__init__.py, linea 24 cambiar 'sqlite:////' por 'sqlite:///'
        linea 47 cambiar mail.functions.mail a functions.mail

    En main/controllers/clientes.py comentar lineas 42,43,44

    En app.py poner el el main los métodos de arriba

analizar los patrones de diseño y comentar el código

    -Singleton :

            -/repositories/repositorioapuesta.py (@singleton_pattern.singleton)
            -/utils/singleton.py

    -Fábrica

    -Fábrica Abstracta

          -/map/apuesta_schema.py (@post_load,@post_dump)
          -/map/cliente_schema.py (@post_load)
          -/map/couta_schema.py (@post_load,@post_dump)
          -/map/empresa_schema.py (@post_load)
          -/map/equipo_schema.py (@post_load,@post_dump)
          -/map/partido_schema.py (@post_load,@post_dump)

    -Constructor :
          -/models/apuesta.py (.setter, .deleter)
          -/models/cliente.py (.setter, .deleter)
          -/models/cuota.py (.setter, .deleter)
          -/models/empresas.py (.setter, .deleter)
          -/models/equipos.py (.setter, .deleter)
          -/models/partidos.py (.setter, .deleter)

    -Prototipo



    -Adaptador

    -Puente

    -Composite

    -Decorador:

          -/repositories/repositorio.py (@property)
          -/repositories/repositorioapuesta.py (@property)
          -/repositories/repositoriobase.py (@abstractmethod)
          -/repositories/repositoriocliente.py (@property)
          -/repositories/repositoriocuota.py (@property)
          -/repositories/repositorioempresa.py (@property)
          -/repositories/repositorioequipo.py (@property)
          -/repositories/repositoriopartido.py (@property)

          -/utils/logger.py (@abstractmethod)

          -/validate/validate_apuesta.py (@property)
          -/validate/validate_cliente.py (decorador, wrapper)
          -/validate/validate_cuota.py (decorador, wrapper)
          -/validate/validate_equipo.py (decorador, wrapper)
          -/validate/validate_partido.py (decorador, wrapper)
          -/services/decorators.py (decorador, wrapper)

          -/models/apuesta.py (@hybrid_property)
          -/models/cliente.py (@hybrid_property)
          -/models/cuota.py (@hybrid_property)
          -/models/empresas.py (@hybrid_property)
          -/models/equipos.py (@hybrid_property)
          -/models/partidos.py (@hybrid_property)

    -Fachada

    -Peso Mosca

    -Proxy



    -Cadena de responsabilidad

    -Solicitud

    -Iterador

    -Memento

    -Visitante

    -Observador

    -Estrategia

    -Función de callback



archivos
    app.py

    en controllers, models, services
        apuesta.py
        clientes.py
        cuota.py
        empresas.py
        equipos.py
        partidos.py
    en mail
        functions.py
    en map
        apuesta_schema.py
        cliente_filters.py
        cliente_schema.py
        couta_schema.py
        empresa_schema.py
        equipo_schema.py
        partido_schema.py
    en repositories (terminado)
        repositorio.py
        repositorioapuesta.py
        repositoriobase.py
        repositoriocliente.py
        repositoriocuota.py
        repositorioempresa.py
        repositorioequipo.py
        repositoriopartido.py
    en utils (terminado)
        logger.py
        singleton.py
    en validate
        validate_apuesta.py
        validate_cliente.py
        validate_cuota.py
        validate_equipo.py
        validate_partido.py